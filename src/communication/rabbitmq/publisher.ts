import logger from '../../config/logger'
import { getRabbitMQChannel, POS_COMMANDS_EXCHANGE } from './connection'

// ‚úÖ Definimos el tipo que faltaba
export interface CommandPayload {
  [key: string]: any
}

export const publishCommand = async (routingKey: string, payload: CommandPayload): Promise<void> => {
  const channel = getRabbitMQChannel()
  const message = Buffer.from(JSON.stringify(payload))

  try {
    logger.info(`üì§ Publicando comando con routing key [${routingKey}]`)

    // ‚úÖ Implementaci√≥n correcta de Publisher Confirms
    const published = channel.publish(
      POS_COMMANDS_EXCHANGE,
      routingKey,
      message,
      { persistent: true }, // Mensaje persistente
    )

    if (published) {
      // Esperamos la confirmaci√≥n del br√≥ker. Si hay un error, lanzar√° una excepci√≥n.
      await channel.waitForConfirms()
      logger.info(`‚úÖ Comando [${routingKey}] confirmado por el br√≥ker.`)
    } else {
      logger.error(`üî• Falla al publicar [${routingKey}]: El buffer del canal est√° lleno.`)
      // Aqu√≠ se podr√≠a implementar una l√≥gica de reintento
      throw new Error('El buffer del canal de RabbitMQ est√° lleno.')
    }
  } catch (error) {
    logger.error(`üî• Error al publicar y confirmar comando [${routingKey}]:`, error)
    // Tu worker de PosCommand deber√≠a capturar este error, marcar el comando como FAILED y reintentarlo m√°s tarde.
    throw error
  }
}
