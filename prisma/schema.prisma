// This is the optimized Prisma schema for Avoqado
// Multi-sector POS & Management System

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// NOTE: CORE MULTI-TENANT ARCHITECTURE
// ==========================================

model Organization {
  id    String       @id @default(cuid())
  name  String
  email String
  phone String
  taxId String?
  type  BusinessType @default(RESTAURANT)

  // Billing configuration
  billingEmail   String?
  billingAddress Json?

  venues      Venue[]
  staff       Staff[]
  invitations Invitation[]
  invoices    Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Basic info
  name     String
  slug     String    @unique
  type     VenueType @default(RESTAURANT)
  timezone String    @default("America/Mexico_City")
  currency String    @default("MXN")

  // Location
  address   String
  city      String
  state     String
  country   String   @default("MX")
  zipCode   String
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)

  // Contact
  phone   String
  email   String
  website String?

  // Branding
  logo           String?
  primaryColor   String?
  secondaryColor String?

  // Status
  active           Boolean   @default(true)
  operationalSince DateTime?

  // POS Integration
  posType   PosType?
  posConfig Json? // Encrypted POS credentials
  posStatus PosStatus @default(NOT_INTEGRATED)

  // Avoqado Fees
  feeType       FeeType      @default(PERCENTAGE)
  feeValue      Decimal      @default(0.025) @db.Decimal(5, 4)
  feeScheduleId String?
  feeSchedule   FeeSchedule? @relation(fields: [feeScheduleId], references: [id])

  // Features & Settings
  features VenueFeature[]
  settings VenueSettings?

  // Relations
  posCommands         PosCommand[]
  posConnectionStatus PosConnectionStatus?
  invitations         Invitation[]
  staff               StaffVenue[]
  menuCategories      MenuCategory[]
  menus               Menu[]
  products            Product[]
  modifierGroups      ModifierGroup[]
  inventories         Inventory[]
  tables              Table[]
  areas               Area[]
  shifts              Shift[]
  timeEntries         TimeEntry[]
  orders              Order[]
  payments            Payment[]
  transactions        VenueTransaction[]
  reviews             Review[]
  terminals           Terminal[]

  // Notifications
  notifications           Notification[]
  notificationPreferences NotificationPreference[]

  // AI Training
  chatTrainingData ChatTrainingData[] @relation("VenueChatTraining")

  // Payment Provider Integration
  paymentConfig        VenuePaymentConfig?
  webhookSubscriptions WebhookSubscription[]
  providerEvents       ProviderEventLog[]
  pricingStructures    VenuePricingStructure[]
  monthlyProfits       MonthlyVenueProfit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([slug])
  @@index([active])
}

model VenueSettings {
  id      String @id @default(cuid())
  venueId String @unique
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Operations
  autoCloseShifts Boolean @default(false)
  shiftDuration   Int     @default(8) // hours
  requirePinLogin Boolean @default(true)

  // Reviews
  autoReplyReviews   Boolean @default(false)
  notifyBadReviews   Boolean @default(true)
  badReviewThreshold Int     @default(3)

  // Inventory
  trackInventory    Boolean @default(false)
  lowStockAlert     Boolean @default(true)
  lowStockThreshold Int     @default(10)

  // Customer features
  allowReservations Boolean @default(false)
  allowTakeout      Boolean @default(false)
  allowDelivery     Boolean @default(false)

  // Payment
  acceptCash          Boolean @default(true)
  acceptCard          Boolean @default(true)
  acceptDigitalWallet Boolean @default(true)
  tipSuggestions      Json? // [15, 18, 20, 25]

  updatedAt DateTime @updatedAt
}

model PosConnectionStatus {
  id      String @id @default(cuid())
  venueId String @unique // Solo puede haber un estado por Venue
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  status          PosConnectionState @default(OFFLINE)
  instanceId      String? // El GUID único de la base de datos del POS
  producerVersion String? // La versión de nuestro producer.ts
  lastHeartbeatAt DateTime? // La última vez que recibimos un latido

  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([lastHeartbeatAt])
}

// ==========================================
// NOTE: STAFF MANAGEMENT (SIMPLIFIED)
// ==========================================

model Staff {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Authentication
  email    String  @unique
  password String? // Null for PIN-only users or OAuth users
  googleId String? @unique // Google OAuth ID
  // pin      String? // ❌ REMOVER - Se mueve a StaffVenue

  // Profile
  firstName    String
  lastName     String
  phone        String?
  employeeCode String?
  photoUrl     String?

  // Status
  active        Boolean      @default(true)
  emailVerified Boolean      @default(false)
  invitations   Invitation[]

  // Access
  venues            StaffVenue[]
  shifts            Shift[]
  ordersCreated     Order[]       @relation("OrderCreatedBy")
  ordersServed      Order[]       @relation("OrderServedBy")
  paymentsProcessed Payment[]
  activities        ActivityLog[]
  reviewsReceived   Review[]

  // Notifications
  notifications           Notification[]
  notificationPreferences NotificationPreference[]

  // AI Training
  chatTrainingData ChatTrainingData[] @relation("UserChatTraining")

  // Time tracking
  timeEntries TimeEntry[]

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  @@index([email])
  // @@index([pin])  // ❌ REMOVER - Ya no existe pin aquí
  @@index([organizationId])
}

model StaffVenue {
  id         String  @id @default(cuid())
  staffId    String
  staff      Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  posStaffId String?
  venueId    String
  venue      Venue   @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // ✅ PIN específico por venue
  pin String? // 4-6 digits for TPV access per venue

  role        StaffRole
  permissions Json? // Custom permissions override

  // Performance tracking (for waiters)
  totalSales    Decimal @default(0) @db.Decimal(12, 2)
  totalTips     Decimal @default(0) @db.Decimal(10, 2)
  averageRating Decimal @default(0) @db.Decimal(3, 2)
  totalOrders   Int     @default(0)

  active    Boolean   @default(true)
  startDate DateTime  @default(now())
  endDate   DateTime?

  @@unique([venueId, posStaffId]) // Asegura que no se duplique posStaffId por venue
  @@unique([staffId, venueId]) // Un staff solo puede tener una relación por venue
  @@unique([venueId, pin]) // ✅ PIN único por venue
  @@index([staffId])
  @@index([venueId])
  @@index([role])
  @@index([pin]) // ✅ Índice para búsquedas de PIN
}

model Invitation {
  id    String    @id @default(cuid())
  email String
  role  StaffRole

  // Tipo de invitación
  type InvitationType @default(VENUE_STAFF) // ✅ AGREGAR

  // Organization (siempre requerida)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Venue (opcional - solo para invitaciones de staff a venue específico)
  venueId String?
  venue   Venue?  @relation(fields: [venueId], references: [id])

  // Token y seguridad
  token     String   @unique @default(cuid()) // ✅ Generar por defecto
  expiresAt DateTime

  // Estado
  status     InvitationStatus @default(PENDING) // ✅ MEJOR QUE isUsed
  acceptedAt DateTime?
  declinedAt DateTime? // ✅ AGREGAR

  // Metadata
  message     String? // ✅ Mensaje personalizado del invitador
  permissions Json? // ✅ Permisos específicos si aplica

  // Tracking
  invitedById  String
  invitedBy    Staff   @relation(fields: [invitedById], references: [id])
  acceptedById String? // ✅ AGREGAR - Quién aceptó (puede ser diferente)

  // Intentos de uso
  attemptCount  Int       @default(0) // ✅ AGREGAR
  lastAttemptAt DateTime? // ✅ AGREGAR

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // ✅ AGREGAR

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@index([venueId])
  @@index([status]) // ✅ AGREGAR
  @@index([expiresAt]) // ✅ AGREGAR para queries de limpieza
}

// ==========================================
// NOTE: MENU & CATEGORIES
// ==========================================
model MenuCategory {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Basic info
  name        String
  description String?
  slug        String

  // Display
  displayOrder Int     @default(0)
  imageUrl     String?
  color        String? // For UI theming
  icon         String? // Icon name/class

  // Hierarchy (for subcategories)
  parentId String?
  parent   MenuCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children MenuCategory[] @relation("CategoryHierarchy")

  // Scheduling
  active         Boolean  @default(true)
  availableFrom  String? // "08:00"
  availableUntil String? // "22:00"
  availableDays  String[] // ["MON", "TUE", "WED"]

  // Relations
  products Product[]
  menus    MenuCategoryAssignment[]

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  externalId   String?
  syncStatus   SyncStatus   @default(NOT_REQUIRED)
  lastSyncAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, slug])
  @@index([syncStatus])
  @@index([venueId])
  @@index([displayOrder])
  @@index([active])
}

model Menu {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Basic info
  name        String
  description String?
  type        MenuType @default(REGULAR)

  // Display
  displayOrder Int     @default(0)
  isDefault    Boolean @default(false) // Main menu

  // Scheduling
  active         Boolean   @default(true)
  startDate      DateTime?
  endDate        DateTime?
  availableFrom  String? // "11:00"
  availableUntil String? // "15:00"
  availableDays  String[] // ["MON", "TUE"]

  // Relations
  categories MenuCategoryAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([venueId])
  @@index([active])
}

model MenuCategoryAssignment {
  id         String       @id @default(cuid())
  menuId     String
  menu       Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  categoryId String
  category   MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  displayOrder Int @default(0)

  @@unique([menuId, categoryId])
  @@index([menuId])
  @@index([categoryId])
}

// ==========================================
// NOTE: INVENTORY MANAGEMENT
// ==========================================

model Product {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Basic info
  sku         String
  name        String
  description String?

  // Category relationship (flexible)
  categoryId String
  category   MenuCategory @relation(fields: [categoryId], references: [id])

  // Type for reporting/analytics
  type ProductType @default(FOOD)

  // Pricing
  price   Decimal  @db.Decimal(10, 2)
  cost    Decimal? @db.Decimal(10, 2)
  taxRate Decimal  @default(0.16) @db.Decimal(5, 4)

  // Display
  imageUrl     String?
  displayOrder Int     @default(0)
  featured     Boolean @default(false)

  // Dietary info
  tags      String[] // ["vegetarian", "gluten-free", "spicy"]
  allergens String[] // ["nuts", "dairy", "shellfish"]
  calories  Int?

  // Preparation
  prepTime     Int? // minutes
  cookingNotes String?

  // Inventory tracking
  trackInventory Boolean @default(false)
  unit           String? // "pza", "kg", "lt", etc.

  // Status
  active         Boolean   @default(true)
  availableFrom  DateTime?
  availableUntil DateTime?

  // POS Integration
  externalId   String? // ID from POS
  externalData Json? // Raw data from POS
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  syncStatus   SyncStatus   @default(NOT_REQUIRED)
  lastSyncAt   DateTime?

  // Relations
  inventory      Inventory?
  orderItems     OrderItem[]
  modifierGroups ProductModifierGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, sku])
  @@unique([venueId, externalId])
  @@index([venueId])
  @@index([categoryId])
  @@index([active])
  @@index([type])
  @@index([syncStatus]) // ✅ NUEVO ÍNDICE
}

model Inventory {
  id            String   @id @default(cuid())
  productId     String   @unique
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  venueId       String
  venue         Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  currentStock  Decimal  @db.Decimal(10, 2)
  reservedStock Decimal  @default(0) @db.Decimal(10, 2)
  minimumStock  Decimal  @default(0) @db.Decimal(10, 2)
  maximumStock  Decimal? @db.Decimal(10, 2)

  lastRestockedAt DateTime?
  lastCountedAt   DateTime?

  movements InventoryMovement[]

  updatedAt DateTime @updatedAt

  @@index([productId])
}

model InventoryMovement {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  type          MovementType
  quantity      Decimal      @db.Decimal(10, 2) // Positive or negative
  previousStock Decimal      @db.Decimal(10, 2)
  newStock      Decimal      @db.Decimal(10, 2)

  reason    String?
  reference String? // Order ID, adjustment ID, etc.

  createdBy String?
  createdAt DateTime @default(now())

  @@index([inventoryId])
  @@index([type])
  @@index([createdAt])
}

// ==========================================
// NOTE: OPERATIONS
// ==========================================
model Area {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  name        String
  description String?

  // --- Campos de Sincronización ---
  externalId   String?      @unique
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?

  tables Table[] // Un área tiene muchas mesas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, externalId])
  @@unique([venueId, name])
}

model Table {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  number   String
  capacity Int
  qrCode   String  @unique
  areaId   String?
  area     Area?   @relation(fields: [areaId], references: [id])
  active   Boolean @default(true)

  orders Order[]

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  externalId   String?

  @@unique([venueId, externalId])
  @@unique([venueId, number])
  @@index([venueId])
}

model Shift {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])
  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id])

  startTime DateTime
  endTime   DateTime?

  // Cash management
  startingCash   Decimal  @default(0) @db.Decimal(10, 2)
  endingCash     Decimal? @db.Decimal(10, 2)
  cashDifference Decimal? @db.Decimal(10, 2)

  // Cash reconciliation (for shift closing)
  cashDeclared     Decimal? @db.Decimal(10, 2)
  cardDeclared     Decimal? @db.Decimal(10, 2)
  vouchersDeclared Decimal? @db.Decimal(10, 2)
  otherDeclared    Decimal? @db.Decimal(10, 2)

  // Summary
  totalSales  Decimal @default(0) @db.Decimal(12, 2)
  totalTips   Decimal @default(0) @db.Decimal(10, 2)
  totalOrders Int     @default(0)

  status ShiftStatus @default(OPEN)
  notes  String?

  orders   Order[]
  payments Payment[]

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  externalId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, externalId])
  @@index([venueId])
  @@index([staffId])
  @@index([status])
  @@index([startTime])
}

// ==========================================
// NOTE: TIME TRACKING
// ==========================================

model TimeEntry {
  id      String @id @default(cuid())
  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Clock times
  clockInTime  DateTime
  clockOutTime DateTime?

  // Break tracking
  breaks TimeEntryBreak[]

  // Job role during this time entry
  jobRole String? // e.g., "Waiter", "Bartender", "Manager"

  // Calculated fields
  totalHours   Decimal? @db.Decimal(5, 2)
  breakMinutes Int?     @default(0)

  // Status
  status TimeEntryStatus @default(CLOCKED_IN)

  // Notes/metadata
  notes    String?
  editedBy String? // Admin who modified if applicable

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId, venueId])
  @@index([venueId, clockInTime])
  @@index([status])
  @@map("time_entries")
}

model TimeEntryBreak {
  id          String    @id @default(cuid())
  timeEntryId String
  timeEntry   TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)

  startTime DateTime
  endTime   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timeEntryId])
  @@map("time_entry_breaks")
}

model Order {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Restrict)

  // Order info
  orderNumber String
  type        OrderType   @default(DINE_IN)
  source      OrderSource @default(TPV)

  // Relations
  tableId String?
  table   Table?  @relation(fields: [tableId], references: [id], onDelete: SetNull)
  shiftId String?
  shift   Shift?  @relation(fields: [shiftId], references: [id], onDelete: SetNull)

  // Staff
  createdById String?
  createdBy   Staff?  @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  servedById  String?
  servedBy    Staff?  @relation("OrderServedBy", fields: [servedById], references: [id], onDelete: SetNull)

  // Customer info (for guest checkout)
  customerName  String?
  customerPhone String?
  customerEmail String?

  // Amounts
  subtotal       Decimal @db.Decimal(12, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  taxAmount      Decimal @db.Decimal(10, 2)
  tipAmount      Decimal @default(0) @db.Decimal(10, 2)
  total          Decimal @db.Decimal(12, 2)

  // Status
  status        OrderStatus   @default(PENDING)
  kitchenStatus KitchenStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Payment split type (set on first payment, enforces UI consistency)
  splitType SplitType?

  // POS sync
  externalId   String? // POS order ID
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  syncStatus   SyncStatus   @default(PENDING)
  syncedAt     DateTime?

  // Relations
  items              OrderItem[]
  payments           Payment[]
  paymentAllocations PaymentAllocation[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@unique([venueId, externalId])
  @@index([venueId])
  @@index([shiftId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity       Int
  unitPrice      Decimal @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  taxAmount      Decimal @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)

  notes String?

  modifiers          OrderItemModifier[]
  paymentAllocations PaymentAllocation[] // ✅ LÍNEA AGREGADA

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  syncStatus   SyncStatus   @default(NOT_REQUIRED) // ✅ NUEVO
  lastSyncAt   DateTime? // ✅ NUEVO
  externalId   String? // Para trackear "folio:idproducto" del POS
  sequence     Int          @default(0) // Orden de los items en la cuenta

  // Kitchen
  sentToKitchenAt DateTime?
  preparedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // ✅ NUEVO

  @@unique([orderId, externalId]) // Para evitar duplicados por externalId
  @@index([orderId])
  @@index([productId])
  @@index([externalId]) // ✅ NUEVO
  @@index([syncStatus]) // ✅ NUEVO
}

// ==========================================
// NOTE: MODIFIERS
// ==========================================

model ModifierGroup {
  id      String @id @default(cuid())
  venueId String // ✅ AGREGAR ESTE CAMPO
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade) // ✅ AGREGAR RELACIÓN

  name        String
  description String?

  required      Boolean @default(false)
  allowMultiple Boolean @default(false)
  minSelections Int     @default(0)
  maxSelections Int?

  // Display
  displayOrder Int     @default(0)
  active       Boolean @default(true)

  modifiers Modifier[]
  products  ProductModifierGroup[]

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([venueId]) // ✅ AGREGAR ÍNDICE
}

model Modifier {
  id      String        @id @default(cuid())
  groupId String
  group   ModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  name  String
  price Decimal @default(0) @db.Decimal(10, 2)

  //POS sync
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  active       Boolean      @default(true)

  orderItems OrderItemModifier[]
}

model ProductModifierGroup {
  id        String        @id @default(cuid())
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  groupId   String
  group     ModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  displayOrder Int @default(0)

  @@unique([productId, groupId])
}

model OrderItemModifier {
  id          String    @id @default(cuid())
  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierId  String
  modifier    Modifier  @relation(fields: [modifierId], references: [id])

  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2)
}

// ==========================================
// NOTE: PAYMENTS & FEES
// ==========================================

model Payment {
  id      String  @id @default(cuid())
  venueId String
  venue   Venue   @relation(fields: [venueId], references: [id], onDelete: Restrict)
  orderId String
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  shiftId String?
  shift   Shift?  @relation(fields: [shiftId], references: [id], onDelete: SetNull)

  processedById String?
  processedBy   Staff?  @relation(fields: [processedById], references: [id], onDelete: SetNull)

  // Amounts
  amount    Decimal @db.Decimal(12, 2)
  tipAmount Decimal @default(0) @db.Decimal(10, 2)

  // Payment info
  method    PaymentMethod
  status    TransactionStatus @default(PENDING)
  splitType SplitType         @default(FULLPAYMENT) // How this payment was split (audit trail)
  type      PaymentType?      @default(REGULAR) // How this payment was split (audit trail)

  // Processor info
  processor     String? // stripe, mercadopago, etc.
  processorId   String?
  processorData Json?

  // authorization info
  authorizationNumber String? // "502511"
  referenceNumber     String? // "000000188231" 

  cardBrand CardBrand? // MASTERCARD, VISA, etc.
  maskedPan String? // "411111******1111"
  entryMode CardEntryMode? // CONTACTLESS, CHIP, SWIPE, etc.

  // Fee calculation
  feePercentage Decimal @db.Decimal(5, 4)
  feeAmount     Decimal @db.Decimal(10, 2)
  netAmount     Decimal @db.Decimal(12, 2)

  // Receipt
  receipts DigitalReceipt[]

  // POS sync
  externalId   String?
  originSystem OriginSystem @default(AVOQADO)
  posRawData   Json?
  syncStatus   SyncStatus   @default(PENDING)
  syncedAt     DateTime?

  // Relations
  transaction     VenueTransaction?
  allocations     PaymentAllocation[] // ✅ LÍNEA AGREGADA
  review          Review? // ✅ LÍNEA AGREGADA (en singular porque es 1-a-1)
  transactionCost TransactionCost?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorizationNumber]) // ✅ NUEVO ÍNDICE
  @@index([referenceNumber]) // ✅ NUEVO ÍNDICE
  @@index([cardBrand]) // ✅ NUEVO ÍNDICE
  @@index([venueId])
  @@index([orderId])
  @@index([shiftId])
  @@index([method])
  @@index([status])
}

model PaymentAllocation {
  id        String  @id @default(cuid())
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  // A qué se asigna este pedazo del pago
  orderItemId String?
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  // O podrías asignarlo a una orden si es un pago general
  orderId     String
  order       Order      @relation(fields: [orderId], references: [id])

  amount Decimal @db.Decimal(12, 2) // La porción del pago asignada

  createdAt DateTime @default(now())

  @@index([paymentId])
  @@index([orderItemId])
  @@index([orderId])
}

model DigitalReceipt {
  id String @id @default(cuid())

  // Un identificador seguro y no secuencial para la URL pública
  // Es mejor que usar el CUID/UUID directamente, que puede ser largo
  accessKey String @unique @default(cuid())

  // Relación con el pago
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  // Snapshot de los datos en el momento de la creación
  // ¡Esta es la clave para la inmutabilidad!
  dataSnapshot Json

  // Tracking del envío
  status         ReceiptStatus @default(PENDING)
  recipientEmail String?
  sentAt         DateTime?
  viewedAt       DateTime? // Se puede actualizar cuando se accede al link

  createdAt DateTime @default(now())

  @@index([accessKey])
  @@index([paymentId])
}

model VenueTransaction {
  id        String  @id @default(cuid())
  venueId   String
  venue     Venue   @relation(fields: [venueId], references: [id])
  paymentId String  @unique
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  type TransactionType

  // Amounts
  grossAmount Decimal @db.Decimal(12, 2)
  feeAmount   Decimal @db.Decimal(10, 2)
  netAmount   Decimal @db.Decimal(12, 2)

  // Settlement
  status       SettlementStatus @default(PENDING)
  settledAt    DateTime?
  settlementId String?

  createdAt DateTime @default(now())

  @@index([venueId])
  @@index([status])
  @@index([createdAt])
}

// ==========================================
// NOTE: FEATURES & BILLING
// ==========================================

model Feature {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  category     FeatureCategory
  monthlyPrice Decimal         @db.Decimal(10, 2)

  active Boolean @default(true)

  venues VenueFeature[]
}

model VenueFeature {
  id        String  @id @default(cuid())
  venueId   String
  venue     Venue   @relation(fields: [venueId], references: [id], onDelete: Cascade)
  featureId String
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Restrict)

  active       Boolean @default(true)
  monthlyPrice Decimal @db.Decimal(10, 2)

  startDate DateTime  @default(now())
  endDate   DateTime?

  @@unique([venueId, featureId])
  @@index([venueId])
}

model FeeSchedule {
  id          String  @id @default(cuid())
  name        String
  description String?

  tiers  FeeTier[]
  venues Venue[]

  active Boolean @default(true)
}

model FeeTier {
  id         String      @id @default(cuid())
  scheduleId String
  schedule   FeeSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  minVolume  Decimal  @db.Decimal(12, 2)
  maxVolume  Decimal? @db.Decimal(12, 2)
  percentage Decimal  @db.Decimal(5, 4)

  @@index([scheduleId])
}

model Invoice {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  invoiceNumber String   @unique
  periodStart   DateTime
  periodEnd     DateTime
  dueDate       DateTime

  // Amounts
  subtotal  Decimal @db.Decimal(12, 2)
  taxAmount Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(12, 2)

  status InvoiceStatus @default(PENDING)
  paidAt DateTime?

  items InvoiceItem[]

  createdAt DateTime @default(now())

  @@index([organizationId])
  @@index([status])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  type        ChargeType
  description String
  venueId     String?

  quantity  Decimal @db.Decimal(10, 2)
  unitPrice Decimal @db.Decimal(10, 2)
  amount    Decimal @db.Decimal(12, 2)
}

// ==========================================
// NOTE REVIEWS
// ==========================================

model Review {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  // Rating
  overallRating  Int // 1-5
  foodRating     Int?
  serviceRating  Int?
  ambienceRating Int?

  comment String?

  // Customer info
  customerName  String?
  customerEmail String?

  // Source
  source     ReviewSource @default(AVOQADO)
  externalId String? // Google review ID, etc.

  terminalId String?
  terminal   Terminal? @relation(fields: [terminalId], references: [id])

  paymentId String?  @unique // Un pago solo puede tener un review directo
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  servedById String? // Para ligar al mesero
  servedBy   Staff?  @relation(fields: [servedById], references: [id])

  // Response
  responseText      String?
  respondedAt       DateTime?
  responseAutomated Boolean   @default(false)

  createdAt DateTime @default(now())

  @@index([venueId])
  @@index([overallRating])
  @@index([createdAt])
  @@index([terminalId]) // ✅ Nuevo índice
  @@index([paymentId]) // ✅ Nuevo índice
  @@index([servedById]) // ✅ Nuevo índice
}

// ==========================================
// NOTE HARDWARE
// ==========================================

model Terminal {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  serialNumber String       @unique
  name         String
  type         TerminalType

  // Status
  status        TerminalStatus @default(INACTIVE)
  lastHeartbeat DateTime?

  // Health monitoring
  version    String? // AvoqadoPOS version
  systemInfo Json? // Platform, memory, uptime, etc.
  ipAddress  String? // Last known IP address

  // Configuration
  config Json?

  // Preferred processor for this TPV (LEGACY/MENTA/AUTO)
  preferredProcessor PaymentProcessor @default(AUTO)

  // Menta API Integration - Smart Caching
  mentaTerminalId String? // Menta's UUID for payments (cached on first use)
  mentaLastSync   DateTime? // When we last synced with Menta API

  reviews Review[] // ✅ LÍNEA AGREGADA

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([venueId])
  @@index([status])
}

// ==========================================
// NOTE: PAYMENT PROVIDER INTEGRATION
// ==========================================

// Generic payment provider model
/// Catalog of upstream payment vendors that Avoqado integrates with.
/// Acts as the template/metadata layer; `configSchema` describes
/// how merchant-level `providerConfig` JSON should be shaped.
model PaymentProvider {
  id          String       @id @default(cuid())
  code        String       @unique // "MENTA", "CLIP", "BANORTE_DIRECT", etc.
  name        String // "Menta", "Clip", "Banorte Direct"
  type        ProviderType // PAYMENT_PROCESSOR, BANK_DIRECT, WALLET
  countryCode String[] // ["MX", "AR"]
  active      Boolean      @default(true)

  // Provider-specific configuration schema
  /// Optional JSON schema describing the structure required in
  /// `MerchantAccount.providerConfig` for this provider.
  configSchema Json? // JSON schema for validation

  // Relations
  merchants      MerchantAccount[]
  webhooks       WebhookSubscription[]
  eventLogs      ProviderEventLog[]
  costStructures ProviderCostStructure[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([type])
}

/// Concrete merchant account issued by a provider for one of our venues.
/// Holds the secure credentials and per-account configuration while keeping
/// a reference to the reusable provider template above.
model MerchantAccount {
  id String @id @default(cuid())

  // Provider relationship
  providerId String
  provider   PaymentProvider @relation(fields: [providerId], references: [id])

  // Generic merchant info
  externalMerchantId String // Provider's merchant ID
  alias              String?

  // Display and status fields for UI
  displayName  String? // User-friendly name like "Cuenta Principal", "Facturación"
  active       Boolean @default(true) // Enable/disable account
  displayOrder Int     @default(0) // For consistent ordering in UI

  // Encrypted credentials (provider-agnostic)
  credentialsEncrypted Json // Different per provider

  // Provider-specific config
  /// Per-account configuration values that comply with the provider's
  /// `configSchema`. Non-sensitive knobs live here; secrets stay encrypted.
  providerConfig Json? // Flexible config per provider

  // Relations
  venueConfigsPrimary   VenuePaymentConfig[]    @relation("PrimaryAccount")
  venueConfigsSecondary VenuePaymentConfig[]    @relation("SecondaryAccount")
  venueConfigsTertiary  VenuePaymentConfig[]    @relation("TertiaryAccount")
  costStructures        ProviderCostStructure[]
  transactionCosts      TransactionCost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, externalMerchantId])
  @@index([providerId])
  @@index([active])
  @@index([displayOrder])
}

/// Mapping between a venue and the merchant accounts it should use.
/// Supports primary/secondary/tertiary routing plus extra rules so the
/// same venue can failover or route by business logic.
model VenuePaymentConfig {
  id      String @id @default(cuid())
  venueId String @unique
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Account hierarchy (flexible for any provider)
  primaryAccountId String
  primaryAccount   MerchantAccount @relation("PrimaryAccount", fields: [primaryAccountId], references: [id])

  secondaryAccountId String?
  secondaryAccount   MerchantAccount? @relation("SecondaryAccount", fields: [secondaryAccountId], references: [id])

  tertiaryAccountId String?
  tertiaryAccount   MerchantAccount? @relation("TertiaryAccount", fields: [tertiaryAccountId], references: [id])

  // Routing rules (JSON for flexibility)
  /// Optional dynamic rules (e.g. BIN routing, amount thresholds) that decide
  /// which merchant account handles a given payment.
  routingRules Json? // { "factura": "secondary", "amount_over": 1000, "bin_routing": {...} }

  // Default processor preference
  preferredProcessor PaymentProcessor @default(AUTO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([primaryAccountId])
  @@index([secondaryAccountId])
  @@index([tertiaryAccountId])
}

// Generic webhook subscription (works for any provider)
model WebhookSubscription {
  id      String @id @default(cuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Provider info
  providerId String?
  provider   PaymentProvider? @relation(fields: [providerId], references: [id])

  url             String
  secretEncrypted String?
  active          Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([venueId])
  @@index([providerId])
}

// Generic provider event log
model ProviderEventLog {
  id       String       @id @default(cuid())
  provider ProviderType @default(PAYMENT_PROCESSOR)
  venueId  String?
  venue    Venue?       @relation(fields: [venueId], references: [id], onDelete: SetNull)

  // Provider info
  providerId      String?
  paymentProvider PaymentProvider? @relation(fields: [providerId], references: [id])

  eventId String?
  type    String?
  payload Json
  status  EventStatus @default(PENDING)

  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@index([provider])
  @@index([venueId])
  @@index([status])
  @@index([providerId])
}

// ==========================================
// NOTE: COST MANAGEMENT & PRICING
// ==========================================

/// Defines what the upstream provider charges Avoqado for a given
/// merchant account during a time window (the supply-side economics).
model ProviderCostStructure {
  id String @id @default(cuid())

  // Provider relationship
  providerId String
  provider   PaymentProvider @relation(fields: [providerId], references: [id])

  // Merchant account (costs can vary by account type)
  merchantAccountId String
  merchantAccount   MerchantAccount @relation(fields: [merchantAccountId], references: [id])

  // Cost breakdown by transaction type
  debitRate         Decimal @db.Decimal(5, 4) // e.g., 0.0150 (1.5%)
  creditRate        Decimal @db.Decimal(5, 4) // e.g., 0.0250 (2.5%)
  amexRate          Decimal @db.Decimal(5, 4) // e.g., 0.0350 (3.5%)
  internationalRate Decimal @db.Decimal(5, 4) // e.g., 0.0400 (4.0%)

  // Fixed costs per transaction (if applicable)
  fixedCostPerTransaction Decimal? @db.Decimal(8, 4) // e.g., 0.50 MXN

  // Monthly/volume-based costs
  monthlyFee     Decimal? @db.Decimal(10, 2)
  minimumVolume  Decimal? @db.Decimal(12, 2)
  volumeDiscount Decimal? @db.Decimal(5, 4)

  // Period this cost structure is valid for
  effectiveFrom DateTime
  effectiveTo   DateTime?

  // Status
  active Boolean @default(true)

  // Metadata
  proposalReference String? // Reference to Menta's proposal
  notes             String?

  // Relations
  transactionCosts TransactionCost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([merchantAccountId, effectiveFrom])
  @@index([providerId])
  @@index([merchantAccountId])
  @@index([effectiveFrom])
}

/// Pricing agreement we offer to a venue for processing via a particular
/// account tier. Mirrors provider cost fields but includes our margin.
model VenuePricingStructure {
  id String @id @default(cuid())

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Account type this pricing applies to
  accountType AccountType // PRIMARY, SECONDARY, TERTIARY

  // Pricing by transaction type (with Avoqado's margin included)
  debitRate         Decimal @db.Decimal(5, 4) // e.g., 0.0200 (2.0% - includes margin)
  creditRate        Decimal @db.Decimal(5, 4) // e.g., 0.0300 (3.0% - includes margin)
  amexRate          Decimal @db.Decimal(5, 4) // e.g., 0.0400 (4.0% - includes margin)
  internationalRate Decimal @db.Decimal(5, 4) // e.g., 0.0450 (4.5% - includes margin)

  // Fixed fees (with margin)
  fixedFeePerTransaction Decimal? @db.Decimal(8, 4) // e.g., 0.75 MXN
  monthlyServiceFee      Decimal? @db.Decimal(10, 2) // e.g., 299.00 MXN

  // Minimum transaction volumes or penalties
  minimumMonthlyVolume Decimal? @db.Decimal(12, 2)
  volumePenalty        Decimal? @db.Decimal(10, 2)

  // Period this pricing is valid for
  effectiveFrom DateTime
  effectiveTo   DateTime?

  // Status
  active Boolean @default(true)

  // Contract/agreement reference
  contractReference String?
  notes             String?

  // Relations
  transactionCosts TransactionCost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, accountType, effectiveFrom])
  @@index([venueId])
  @@index([accountType])
  @@index([effectiveFrom])
}

/// Snapshot of the economics for a single payment. Links the payment to the
/// merchant account used and records both provider cost and venue charge so
/// we can compute margin and later aggregate into reports.
model TransactionCost {
  id String @id @default(cuid())

  // Payment reference
  paymentId String  @unique
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  // Account used for this transaction
  merchantAccountId String
  merchantAccount   MerchantAccount @relation(fields: [merchantAccountId], references: [id])

  // Transaction details
  transactionType TransactionCardType
  amount          Decimal             @db.Decimal(12, 2)

  // Costs (what we pay to provider)
  providerRate       Decimal @db.Decimal(5, 4) // Rate charged by provider
  providerCostAmount Decimal @db.Decimal(10, 4) // Actual cost amount
  providerFixedFee   Decimal @default(0) @db.Decimal(8, 4)

  // Revenue (what we charge venue)
  venueRate         Decimal @db.Decimal(5, 4) // Rate we charge venue
  venueChargeAmount Decimal @db.Decimal(10, 4) // What we charge venue
  venueFixedFee     Decimal @default(0) @db.Decimal(8, 4)

  // Profit calculation
  grossProfit  Decimal @db.Decimal(10, 4) // venueCharge - providerCost
  profitMargin Decimal @db.Decimal(5, 4) // grossProfit / venueCharge

  // References to cost structures used
  providerCostStructureId String?
  providerCostStructure   ProviderCostStructure? @relation(fields: [providerCostStructureId], references: [id])

  venuePricingStructureId String?
  venuePricingStructure   VenuePricingStructure? @relation(fields: [venuePricingStructureId], references: [id])

  createdAt DateTime @default(now())

  @@index([paymentId])
  @@index([merchantAccountId])
  @@index([transactionType])
  @@index([createdAt])
}

// Monthly profit summary per venue
model MonthlyVenueProfit {
  id String @id @default(cuid())

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Period
  year  Int
  month Int

  // Volume metrics
  totalTransactions Int
  totalVolume       Decimal @db.Decimal(15, 2)

  // By transaction type
  debitTransactions         Int     @default(0)
  debitVolume               Decimal @default(0) @db.Decimal(15, 2)
  creditTransactions        Int     @default(0)
  creditVolume              Decimal @default(0) @db.Decimal(15, 2)
  amexTransactions          Int     @default(0)
  amexVolume                Decimal @default(0) @db.Decimal(15, 2)
  internationalTransactions Int     @default(0)
  internationalVolume       Decimal @default(0) @db.Decimal(15, 2)

  // Financial summary
  totalProviderCosts  Decimal @db.Decimal(12, 4) // What we paid to providers
  totalVenueCharges   Decimal @db.Decimal(12, 4) // What we charged venue
  totalGrossProfit    Decimal @db.Decimal(12, 4) // Our profit
  averageProfitMargin Decimal @db.Decimal(5, 4) // Average margin %

  // Monthly fees
  monthlyProviderFees Decimal @default(0) @db.Decimal(10, 2)
  monthlyServiceFees  Decimal @default(0) @db.Decimal(10, 2)

  // Status
  status ProfitStatus @default(CALCULATED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([venueId, year, month])
  @@index([venueId])
  @@index([year, month])
  @@index([status])
}

// ==========================================
// NOTE: AUDIT & LOGS
// ==========================================

model ActivityLog {
  id      String  @id @default(cuid())
  staffId String?
  staff   Staff?  @relation(fields: [staffId], references: [id])
  venueId String

  action   String
  entity   String?
  entityId String?

  data      Json?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([staffId])
  @@index([venueId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// ==========================================
// NOTE: CUSTOMERS (FUTURE IMPLEMENTATION)
// ==========================================

model Customer {
  id    String  @id @default(cuid())
  email String? @unique
  phone String? @unique

  firstName String?
  lastName  String?
  birthDate DateTime?
  gender    String?

  // Auth
  password   String?
  provider   AuthProvider @default(EMAIL)
  providerId String?

  // Preferences
  language         String  @default("es")
  marketingConsent Boolean @default(false)

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
}

// ==========================================
// NOTE: NOTIFICATIONS SYSTEM
// ==========================================

model Notification {
  id String @id @default(cuid())

  // Recipient
  recipientId String
  recipient   Staff  @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  // Context
  venueId String?
  venue   Venue?  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Notification content
  type        NotificationType
  title       String
  message     String
  actionUrl   String? // Deep link or route
  actionLabel String? // Button text like "View Order"

  // Metadata
  entityType String? // "Order", "Payment", "Review", etc.
  entityId   String? // ID of related entity
  metadata   Json? // Additional context data

  // Status
  isRead   Boolean              @default(false)
  readAt   DateTime?
  priority NotificationPriority @default(NORMAL)

  // Delivery channels
  channels NotificationChannel[] @default([IN_APP])

  // Tracking
  sentAt   DateTime?
  failedAt DateTime?
  errorMsg String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipientId])
  @@index([venueId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([entityType, entityId])
}

model NotificationPreference {
  id String @id @default(cuid())

  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)

  venueId String?
  venue   Venue?  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  // Notification type settings
  type     NotificationType
  enabled  Boolean               @default(true)
  channels NotificationChannel[] @default([IN_APP])
  priority NotificationPriority  @default(NORMAL)

  // Scheduling
  quietStart String? // "22:00" - don't send notifications after this time
  quietEnd   String? // "08:00" - don't send notifications before this time

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, venueId, type])
  @@index([staffId])
  @@index([type])
}

model NotificationTemplate {
  id String @id @default(cuid())

  type        NotificationType
  language    String           @default("es")
  title       String
  message     String
  actionLabel String?

  // Variables that can be used in templates
  // e.g., "{{customerName}} left a {{rating}}-star review"
  variables String[] @default([])

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, language])
  @@index([type])
  @@index([active])
}

model PosCommand {
  id            String        @id @default(cuid())
  venueId       String
  venue         Venue         @relation(fields: [venueId], references: [id])
  entityType    String // "Order", "Payment"
  entityId      String // ID en nuestra BD
  commandType   CommandType // CREATE, UPDATE, DELETE
  payload       Json
  status        CommandStatus @default(PENDING)
  attempts      Int           @default(0)
  lastAttemptAt DateTime?
  errorMessage  String?
  completedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([venueId, status])
  @@index([entityType, entityId])
  @@index([status, createdAt])
}

// ==========================================
// NOTE: ENUMS
// ==========================================

enum BusinessType {
  RESTAURANT
  RETAIL
  HOTEL
  FITNESS
  SPA
  OTHER
}

enum VenueType {
  RESTAURANT
  BAR
  CAFE
  FAST_FOOD
  FOOD_TRUCK
  RETAIL_STORE
  HOTEL_RESTAURANT
  FITNESS_STUDIO
  SPA
  OTHER
}

enum PosType {
  SOFTRESTAURANT
  SQUARE
  TOAST
  CLOVER
  ALOHA
  MICROS
  NCR
  CUSTOM
  NONE
}

enum PosStatus {
  NOT_INTEGRATED
  CONNECTING
  CONNECTED
  ERROR
  DISABLED
}

enum FeeType {
  PERCENTAGE
  FIXED
  TIERED
}

enum StaffRole {
  SUPERADMIN // Full access to everything
  OWNER // Full access to everything
  ADMIN // Full venue access
  MANAGER // Operations access
  WAITER // Service access
  CASHIER // Payment access only
  KITCHEN // Kitchen display access
  HOST // Reservations/seating
  VIEWER // Read-only
}

enum ProductType {
  FOOD
  BEVERAGE
  ALCOHOL
  RETAIL
  SERVICE
  OTHER
}

enum MenuType {
  REGULAR
  BREAKFAST
  LUNCH
  DINNER
  SEASONAL
  CATERING
  DRINKS
  KIDS
}

enum MovementType {
  PURCHASE // New stock arrival
  SALE // Sold to customer
  ADJUSTMENT // Manual adjustment
  LOSS // Damage, theft, expiry
  TRANSFER // Between venues
  COUNT // Physical count correction
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
  PICKUP
}

enum OrderSource {
  TPV // Terminal
  QR // Customer QR
  WEB // Website
  APP // Mobile app
  PHONE // Phone order
  POS // Direct from POS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
  DELETED
}

enum KitchenStatus {
  PENDING
  RECEIVED
  PREPARING
  READY
  SERVED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  DIGITAL_WALLET
  BANK_TRANSFER
  OTHER
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum SettlementStatus {
  PENDING
  PROCESSING
  SETTLED
  FAILED
}

enum ShiftStatus {
  OPEN
  CLOSING
  CLOSED
}

enum FeatureCategory {
  OPERATIONS
  PAYMENTS
  MARKETING
  ANALYTICS
  INTEGRATIONS
}

enum ChargeType {
  TRANSACTION_FEE
  FEATURE_FEE
  SETUP_FEE
  OVERAGE_FEE
  OTHER
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ReviewSource {
  AVOQADO
  GOOGLE
  TRIPADVISOR
  FACEBOOK
  YELP
  TPV
}

enum TerminalType {
  TPV_ANDROID
  TPV_IOS
  PRINTER_RECEIPT
  PRINTER_KITCHEN
  KDS // Kitchen Display System
}

enum TerminalStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
}

enum SyncStatus {
  PENDING
  SYNCING
  SYNCED
  FAILED
  NOT_REQUIRED
}

enum InvitationType {
  ORGANIZATION_ADMIN // Invitación para admin de organización
  VENUE_STAFF // Invitación para staff de venue
  VENUE_ADMIN // Invitación para admin de venue específico
}

enum InvitationStatus {
  PENDING // Esperando aceptación
  ACCEPTED // Aceptada y usada
  DECLINED // Rechazada explícitamente
  EXPIRED // Expiró antes de usar
  REVOKED // Revocada por admin
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  APPLE
}

enum ReceiptStatus {
  PENDING // Generado pero no enviado
  SENT // Enviado exitosamente
  DELIVERED // Confirmado como entregado por el servicio de email (si lo soporta)
  VIEWED // El cliente abrió el link
  ERROR // Fallo en el envío
}

enum OriginSystem {
  AVOQADO // Creado en nuestro sistema (la fuente de verdad por defecto)
  POS_SOFTRESTAURANT // Sincronizado desde el POS SoftRestaurant
}

enum CommandType {
  CREATE
  UPDATE
  DELETE
  CANCEL
}

enum CommandStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PosConnectionState {
  ONLINE // Recibiendo heartbeats normalmente
  OFFLINE // No hemos recibido un heartbeat en mucho tiempo
  NEEDS_RECONCILIATION // Se detectó un cambio de InstanceId (¡Alerta máxima!)
}

enum PaymentProcessor {
  LEGACY
  MENTA
  CLIP
  BANK_DIRECT
  AUTO
}

enum ProviderType {
  PAYMENT_PROCESSOR // Menta, Stripe, etc.
  BANK_DIRECT // Direct bank integration
  WALLET // Clip, PayPal, etc.
  GATEWAY // Payment gateway
  OTHER
}

enum EventStatus {
  PENDING
  PROCESSED
  ERROR
}

enum AccountType {
  PRIMARY
  SECONDARY
  TERTIARY
}

enum TransactionCardType {
  DEBIT
  CREDIT
  AMEX
  INTERNATIONAL
  OTHER
}

enum ProfitStatus {
  CALCULATED
  VERIFIED
  DISPUTED
  FINALIZED
}

enum SplitType {
  PERPRODUCT // Pay for specific products
  EQUALPARTS // Split equally among people
  CUSTOMAMOUNT // Custom payment amount
  FULLPAYMENT // Pay the entire bill
}

enum CardBrand {
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  DISCOVER
  DINERS_CLUB
  JCB
  MAESTRO
  UNIONPAY
  ELO
  HIPERCARD
  OTHER
}

enum CardEntryMode {
  CONTACTLESS // NFC/Tap
  CONTACT // Magnetic stripe
  CHIP // EMV Chip insert
  SWIPE // Magnetic stripe
  MANUAL // Keyed entry
  FALLBACK // Chip fallback to swipe
  ONLINE // E-commerce/online
  OTHER
}

enum PaymentType {
  REGULAR // Normal order-based payment
  FAST // Quick payment without order items
  REFUND // Future: refund payments
  ADJUSTMENT // Future: manual adjustments
}

enum NotificationType {
  // Order notifications
  NEW_ORDER
  ORDER_UPDATED
  ORDER_READY
  ORDER_CANCELLED

  // Payment notifications
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REFUND_PROCESSED

  // Review notifications
  NEW_REVIEW
  BAD_REVIEW
  REVIEW_RESPONSE_NEEDED

  // Staff notifications
  SHIFT_REMINDER
  SHIFT_ENDED
  NEW_STAFF_JOINED

  // System notifications
  POS_DISCONNECTED
  POS_RECONNECTED
  LOW_INVENTORY
  SYSTEM_MAINTENANCE
  FEATURE_UPDATED

  // Admin notifications
  VENUE_APPROVAL_NEEDED
  VENUE_SUSPENDED
  HIGH_COMMISSION_ALERT
  REVENUE_MILESTONE

  // General
  ANNOUNCEMENT
  REMINDER
  ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationChannel {
  IN_APP // Dashboard notifications
  EMAIL // Email notifications
  SMS // SMS notifications (future)
  PUSH // Push notifications (future)
  WEBHOOK // Webhook notifications (future)
}

// ============================
// AI TRAINING TABLES
// ============================

model ChatTrainingData {
  id               String   @id @default(cuid())
  venueId          String
  venue            Venue    @relation("VenueChatTraining", fields: [venueId], references: [id], onDelete: Cascade)
  userId           String
  user             Staff    @relation("UserChatTraining", fields: [userId], references: [id], onDelete: Cascade)
  userQuestion     String
  aiResponse       String
  sqlQuery         String?
  sqlResult        Json?
  confidence       Float
  executionTime    Int?
  rowsReturned     Int?
  wasCorrect       Boolean? // User feedback: was this response correct?
  userFeedback     String? // Optional user feedback text
  responseCategory String? // sales, staff, inventory, etc.
  sessionId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  feedback ChatFeedback[]

  @@index([venueId])
  @@index([userId])
  @@index([responseCategory])
  @@index([confidence])
  @@index([createdAt])
}

model LearnedPatterns {
  id                 String    @id @default(cuid())
  questionPattern    String // Regex or keywords that match questions
  category           String // sales, staff, inventory, etc.
  optimalSqlTemplate String // Best SQL template for this pattern
  averageConfidence  Float
  successRate        Float // % of correct responses
  totalUsages        Int       @default(0)
  lastUsed           DateTime?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([questionPattern, category])
  @@index([category])
  @@index([successRate])
  @@index([isActive])
}

model ChatFeedback {
  id                String               @id @default(cuid())
  trainingDataId    String               @unique // Only one feedback per training data
  trainingData      ChatTrainingData     @relation(fields: [trainingDataId], references: [id], onDelete: Cascade)
  feedbackType      ChatFeedbackType
  correctedResponse String? // What the response should have been
  correctedSql      String? // What the SQL should have been
  adminNotes        String?
  processingStatus  ChatProcessingStatus @default(PENDING)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([processingStatus])
}

enum ChatFeedbackType {
  CORRECT
  INCORRECT
  PARTIALLY_CORRECT
  CLARIFICATION_NEEDED
}

enum ChatProcessingStatus {
  PENDING
  PROCESSED
  APPLIED
}

enum TimeEntryStatus {
  CLOCKED_IN // Currently working
  ON_BREAK // Currently on break
  CLOCKED_OUT // Finished shift
  ADMIN_EDITED // Modified by admin
}
