name: Deploy to Render

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run unit tests
        run: npm run test:unit

      - name: Build application
        run: npm run build

  # Deploy to Staging (develop branch or manual)
  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render Staging
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        run: |
          echo "üöÄ Deploying to Render Staging Environment"
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
            
      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 120
          
      - name: Health check
        run: |
          echo "üè• Performing health check..."
          for i in {1..10}; do
            if curl -f ${{ vars.STAGING_API_URL }}/health; then
              echo "‚úÖ Health check passed!"
              break
            fi
            echo "‚è≥ Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done

  # Deploy to Production (main branch or manual)
  deploy-production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
        run: |
          echo "üöÄ Deploying to Render Production Environment"
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
            
      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 150
          
      - name: Health check
        run: |
          echo "üè• Performing health check..."
          for i in {1..10}; do
            if curl -f ${{ vars.PRODUCTION_API_URL }}/health; then
              echo "‚úÖ Health check passed!"
              break
            fi
            echo "‚è≥ Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Deployment Success Notification
        if: |
          (needs.deploy-staging.result == 'success') ||
          (needs.deploy-production.result == 'success')
        run: |
          ENV=${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          echo "üéâ $ENV deployment completed successfully!"
          
      - name: Deployment Failure Notification
        if: |
          (needs.deploy-staging.result == 'failure') ||
          (needs.deploy-production.result == 'failure')
        run: |
          ENV=${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          echo "‚ùå $ENV deployment failed!"
          exit 1