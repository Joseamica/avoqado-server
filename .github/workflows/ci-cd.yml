name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  # First job: Test, lint and build
  test-and-build:
    name: Test, Lint & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: TypeScript compilation check
        run: npx tsc --noEmit
        
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Deploy to Staging (develop branch)
  deploy-staging:
    name: Deploy to Staging
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to Render (Staging)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Wait for deployment
        run: sleep 60
        
      - name: Health check
        run: |
          curl -f ${{ vars.STAGING_API_URL }}/health || exit 1
          echo "âœ… Staging deployment successful!"

  # Deploy to Production (main branch)
  deploy-production:
    name: Deploy to Production
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Deploy to Render (Production)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Wait for deployment
        run: sleep 90
        
      - name: Health check
        run: |
          curl -f ${{ vars.PRODUCTION_API_URL }}/health || exit 1
          echo "âœ… Production deployment successful!"

  # Optional: Deploy preview for PR
  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test-and-build
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Build successful!** Ready for review.
              
              **Branch**: \`${pr.head.ref}\`
              **Commit**: ${context.sha.substring(0, 7)}
              **Neon Branch**: \`pr-${context.issue.number}\` will be created when merged
              
              ðŸ“Š **Build artifacts**: Available for 7 days
              ðŸ§ª **Tests**: All passing
              âœ… **Lint**: No issues found`
            })